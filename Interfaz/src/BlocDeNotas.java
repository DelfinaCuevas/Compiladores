
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.TextEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Delfina Cuevas
 */
public class BlocDeNotas extends javax.swing.JFrame {

    /**
     * Creates new form BlocDeNotas
     */
    String programName = "Bloc De Notas";
    String NombreArchivo = "";
    String TextoCont;
    String NA;
    String Direccion;
    String Cont;
    int icont =0 ;

    boolean textChanged  =false;
    Clipboard clip = getToolkit().getSystemClipboard();
    
    public BlocDeNotas() {
        initComponents();
        Numeros.setText(" ");
    }
    
    public void cut() {
    String s = AreaDeTexto.getText();                  
    StringSelection ss = new StringSelection(s); 
    this.getToolkit().getSystemClipboard().setContents(ss, ss);
    AreaDeTexto.setText("");
  }
    
    public void paste() {
    Clipboard c = this.getToolkit().getSystemClipboard();
    Transferable t = c.getContents(this);
    try { 
      String s = (String) t.getTransferData(DataFlavor.stringFlavor);
      AreaDeTexto.setText(AreaDeTexto.getText() + s); 
    }
    catch (Exception e) { 
      this.getToolkit().beep();
      return;
    }
    }
    
    public void copy() {
        Clipboard c = this.getToolkit().getSystemClipboard();
        Transferable t = c.getContents(this); 
        String s = AreaDeTexto.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        Salidas = new javax.swing.JTextArea();
        AreaDeTexto = new java.awt.TextArea();
        Numeros = new java.awt.Label();
        jMenuBar1 = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        NuevoArchivo = new javax.swing.JMenuItem();
        AbrirArchivo = new javax.swing.JMenuItem();
        GuardarArchivo = new javax.swing.JMenuItem();
        GuardarcomoArchivo = new javax.swing.JMenuItem();
        SalirPrograma = new javax.swing.JMenuItem();
        Shell = new javax.swing.JMenu();
        Ejecutar = new javax.swing.JMenuItem();
        Editar = new javax.swing.JMenu();
        Copiar = new javax.swing.JMenuItem();
        Pegar = new javax.swing.JMenuItem();
        Cortar = new javax.swing.JMenuItem();
        SeleccionarTOODO = new javax.swing.JMenuItem();
        EliminarTodo = new javax.swing.JMenuItem();
        Ayuda = new javax.swing.JMenu();
        Instrucciones = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Salidas.setColumns(20);
        Salidas.setRows(5);
        jScrollPane2.setViewportView(Salidas);

        AreaDeTexto.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                AreaDeTextoTextValueChanged(evt);
            }
        });

        Numeros.setText("label1");

        Archivo.setText("Archivo");

        NuevoArchivo.setText("Nuevo");
        NuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoArchivoActionPerformed(evt);
            }
        });
        Archivo.add(NuevoArchivo);

        AbrirArchivo.setText("Abrir");
        AbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirArchivoActionPerformed(evt);
            }
        });
        Archivo.add(AbrirArchivo);

        GuardarArchivo.setText("Guardar");
        GuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarArchivoActionPerformed(evt);
            }
        });
        Archivo.add(GuardarArchivo);

        GuardarcomoArchivo.setText("Guardar como...");
        GuardarcomoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarcomoArchivoActionPerformed(evt);
            }
        });
        Archivo.add(GuardarcomoArchivo);

        SalirPrograma.setText("Salir");
        SalirPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirProgramaActionPerformed(evt);
            }
        });
        Archivo.add(SalirPrograma);

        jMenuBar1.add(Archivo);

        Shell.setText("Shell");

        Ejecutar.setText("Ejecutar");
        Shell.add(Ejecutar);

        jMenuBar1.add(Shell);

        Editar.setText("Editar");

        Copiar.setText("Copiar");
        Copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiarActionPerformed(evt);
            }
        });
        Editar.add(Copiar);

        Pegar.setText("Pegar");
        Pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PegarActionPerformed(evt);
            }
        });
        Editar.add(Pegar);

        Cortar.setText("Cortar");
        Cortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CortarActionPerformed(evt);
            }
        });
        Editar.add(Cortar);

        SeleccionarTOODO.setText("Seleccionar todo");
        SeleccionarTOODO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarTOODOActionPerformed(evt);
            }
        });
        Editar.add(SeleccionarTOODO);

        EliminarTodo.setText("Eliminar");
        EliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarTodoActionPerformed(evt);
            }
        });
        Editar.add(EliminarTodo);

        jMenuBar1.add(Editar);

        Ayuda.setText("Ayuda");
        Ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AyudaActionPerformed(evt);
            }
        });

        Instrucciones.setText("Instrucciones");
        Instrucciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstruccionesActionPerformed(evt);
            }
        });
        Ayuda.add(Instrucciones);

        jMenuBar1.add(Ayuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Numeros, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AreaDeTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Numeros, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AreaDeTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );

        Numeros.getAccessibleContext().setAccessibleName("Numeros");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if("".equals(AreaDeTexto.getText())){
        System.exit(0);
    }
    else if(!textChanged){
        System.exit(0);
    }
    else{
        int confirm = JOptionPane.showConfirmDialog(this, "Deseas guardar antes de salir?", "Bloc De Notas",JOptionPane.YES_NO_OPTION);
        if (confirm==JOptionPane.YES_OPTION){
            if(NombreArchivo.equals(""))
                GuardarComo();
            else
                Guardar(NombreArchivo);
        }
        if (confirm==JOptionPane.NO_OPTION)
        {
            System.exit(0);
        }
    }
}                                  
    {
    }//GEN-LAST:event_formWindowClosing

    private void NuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoArchivoActionPerformed
       NuevoArchivo();
    }//GEN-LAST:event_NuevoArchivoActionPerformed

    private void GuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarArchivoActionPerformed
        if(NombreArchivo.equals(""))
            GuardarComo();
       else
            Guardar(NombreArchivo);// TODO add your handling code here:
    }//GEN-LAST:event_GuardarArchivoActionPerformed

    private void AyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AyudaActionPerformed
         // TODO add your handling code here:
    }//GEN-LAST:event_AyudaActionPerformed

    private void PegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PegarActionPerformed
        paste();// TODO add your handling code here:
    }//GEN-LAST:event_PegarActionPerformed

    private void CortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CortarActionPerformed
        cut();
    }//GEN-LAST:event_CortarActionPerformed

    private void InstruccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstruccionesActionPerformed
        AreaDeTexto.setText("     ");
        AreaDeTexto.setText("En archivo encontraras las opciones \n"
               + "Nuevo(Te crea una documento de texto vacion),\n"
               + "Abrir(Te abrira un documento de texto ya elaborado),\n"
               + "Guardar(Guardara tu archivo de texto sobre escribiendo sobre el antiguo),\n"
               + "Guardar como...(Cuadara el documento de texto eligiendo ubicacion y nombre del archivo)\n"
               + "y Salir(Te saca del bloc de notas)\n"
               + "\nEn la parte de Shell te ejecuta el programa Shell\n"
               + "\nEn la parte de Editar, estan las funciones basicas\n"
               + "las cuales son: Cortar, Copiar, Pegar y Eliminar\n\n"
               + "Por ultimo en la parte de Ayuda se mostrara el mensaje ya visto\n"
               + "\n\n\t\t\t Gracias ATTE: Begospe, Waffle y Delfina");// TODO add your handling code here:
    }//GEN-LAST:event_InstruccionesActionPerformed

    private void AbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirArchivoActionPerformed
       if(AreaDeTexto.getText().length() < 1){
        FileDialog fd = new FileDialog(this, "Elegir Archivo", FileDialog.LOAD);
        fd.show();
        if (fd.getFile() != null) {
            NombreArchivo = fd.getDirectory() + fd.getFile();
            setTitle(NombreArchivo);
            RevisarArchivo();
        }
        AreaDeTexto.requestFocus();
     }
     else if(!textChanged){
        FileDialog fd = new FileDialog(this, "Elegir Archivo", FileDialog.LOAD);
        fd.show();
        if (fd.getFile() != null) {
            NombreArchivo = fd.getDirectory() + fd.getFile();
            setTitle(NombreArchivo);
            RevisarArchivo();
        }
        AreaDeTexto.requestFocus();
     }
     else{
            int confirm = JOptionPane.showConfirmDialog(null, "Deseas guardar antes de salir?", "Bloc de Notas",JOptionPane.YES_NO_OPTION);
            if (confirm==JOptionPane.YES_OPTION)
            {
                if("".equals(NombreArchivo)){
                GuardarComo();
                }
                else{
                    Guardar(NombreArchivo);
                }
            FileDialog fd = new FileDialog(this, "Elegir Archivo", FileDialog.LOAD);
            fd.show();
            if (fd.getFile() != null) {
                NombreArchivo = fd.getDirectory() + fd.getFile();
                setTitle(NombreArchivo);
                RevisarArchivo();
            }
            AreaDeTexto.requestFocus();

            }
            else if(confirm == JOptionPane.NO_OPTION){
                FileDialog fd = new FileDialog(this, "Elegir Archivo", FileDialog.LOAD);
                fd.show();
                if (fd.getFile() != null) {
                    NombreArchivo = fd.getDirectory() + fd.getFile();
                    setTitle(NombreArchivo);
                    RevisarArchivo();
                }
                AreaDeTexto.requestFocus();
            }
     }// TODO add your handling code here:
    }//GEN-LAST:event_AbrirArchivoActionPerformed

    private void SalirProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirProgramaActionPerformed
         if("".equals(AreaDeTexto.getText())){
        System.exit(0);
    }
    else if(!textChanged){
        System.exit(0);
    }
    else{
        int confirm = JOptionPane.showConfirmDialog(this, "Deseas guardar antes de salir?", "Bloc De Notas",JOptionPane.YES_NO_OPTION);
        if (confirm==JOptionPane.YES_OPTION){
            if(NombreArchivo.equals(""))
                GuardarComo();
            else
                Guardar(NombreArchivo);
        }
        if (confirm==JOptionPane.NO_OPTION)
        {
            System.exit(0);
        }
        }   // TODO add your handling code here:
    }//GEN-LAST:event_SalirProgramaActionPerformed

    private void GuardarcomoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarcomoArchivoActionPerformed
        GuardarComo();// TODO add your handling code here:
    }//GEN-LAST:event_GuardarcomoArchivoActionPerformed

    private void AreaDeTextoTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_AreaDeTextoTextValueChanged
        if(TextEvent.TEXT_VALUE_CHANGED!=0)
        {
            if(!textChanged)
            {
                setTitle("* "+getTitle());  
            }
            Verificar();
            textChanged=true;
            GuardarArchivo.setEnabled(true);
        }// T// TODO add your handling code here:
    }//GEN-LAST:event_AreaDeTextoTextValueChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Salidas.setText("Salida : \n");
        Salidas.setEditable(false);// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void EliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarTodoActionPerformed
        AreaDeTexto.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_EliminarTodoActionPerformed

    private void CopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CopiarActionPerformed

    private void SeleccionarTOODOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarTOODOActionPerformed
        AreaDeTexto.selectAll();// TODO add your handling code here:
    }//GEN-LAST:event_SeleccionarTOODOActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlocDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlocDeNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirArchivo;
    private javax.swing.JMenu Archivo;
    private java.awt.TextArea AreaDeTexto;
    private javax.swing.JMenu Ayuda;
    private javax.swing.JMenuItem Copiar;
    private javax.swing.JMenuItem Cortar;
    private javax.swing.JMenu Editar;
    private javax.swing.JMenuItem Ejecutar;
    private javax.swing.JMenuItem EliminarTodo;
    private javax.swing.JMenuItem GuardarArchivo;
    private javax.swing.JMenuItem GuardarcomoArchivo;
    private javax.swing.JMenuItem Instrucciones;
    private javax.swing.JMenuItem NuevoArchivo;
    private java.awt.Label Numeros;
    private javax.swing.JMenuItem Pegar;
    private javax.swing.JTextArea Salidas;
    private javax.swing.JMenuItem SalirPrograma;
    private javax.swing.JMenuItem SeleccionarTOODO;
    private javax.swing.JMenu Shell;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    public void RevisarArchivo() {
        BufferedReader read;
        StringBuffer sb = new StringBuffer();
        try {
            read = new BufferedReader(new FileReader(NombreArchivo));
            String line;
            while ((line = read.readLine()) != null) {
                sb.append(line + "\n");
            }
            AreaDeTexto.setText(sb.toString());
            read.close();
        } catch (FileNotFoundException e) {
            System.out.println("No se encontro el archivo");
        } catch (IOException ioe) {
        }
   

}

    private void Guardar(String NA) {
        setTitle(programName + " " + NombreArchivo);
        try
        {
            FileWriter out;
            out = new FileWriter(NA);
            out.write(AreaDeTexto.getText());
            out.close();
        }
        catch(Exception err)
        {
            System.out.println("Error: " + err);
        }
        textChanged=false;
        GuardarArchivo.setEnabled(false);
    }

    private void NuevoArchivo() {
        FileDialog fd = new FileDialog(BlocDeNotas.this, "Guardar", FileDialog.SAVE);
        fd.show();
        if (fd.getFile() != null) {

            NA=fd.getFile();
            Direccion=fd.getDirectory();
            NombreArchivo = Direccion + NA +".txt";

            setTitle(NombreArchivo);
            try
            {
                DataOutputStream d = new DataOutputStream(new FileOutputStream(NombreArchivo));
                TextoCont = AreaDeTexto.getText();
                BufferedReader br = new BufferedReader(new StringReader(TextoCont));
                while ((TextoCont = br.readLine()) != null)
                {
                    d.writeBytes(TextoCont + "\r\n");
                    d.close();
                }
            }
            catch (Exception e)
            {
                System.out.println("Archivo no encontrado");
            }
            AreaDeTexto.requestFocus();
            Guardar(NombreArchivo);
        }
    }

    private void GuardarComo() {
        if(AreaDeTexto.getText().length() < 1){
            setTitle("Sin Titulo"+programName);
            AreaDeTexto.setText("");
            textChanged=false;
        }
        else if(!textChanged){
            setTitle("Sin Titutlo"+programName);
            AreaDeTexto.setText("");
            textChanged=false;
        }
        else{
            int confirm = JOptionPane.showConfirmDialog(null, "Deseas guardar antes de salir?", "Bloc De Notas",JOptionPane.YES_NO_OPTION);
            if (confirm==JOptionPane.YES_OPTION)
            {
                if("".equals(NombreArchivo)){
                GuardarComo();
                }
                else{
                    Guardar(NombreArchivo);
                }
                setTitle(programName);
                NombreArchivo="";
                AreaDeTexto.setText("");
                textChanged=false;

            }
            else if(confirm == JOptionPane.NO_OPTION){
                setTitle(programName);
                AreaDeTexto.setText("");
                textChanged=false;
            }
        }
    }

    private void Verificar() {
        Numeros.setText(" ");
        while(AreaDeTexto.getText().equals(";"))//Esto es para que apaesca la cuenta de las lineas de codigo, por alguna razon aun no sale, en reparacion
        {
            icont++;
            Cont=String.valueOf(icont);
            Numeros.setText(Numeros + (Cont) + "\n");
        }
    }//To change body of generated methods, choose Tools | Templates.
}


